MODEL = f'yolopv2'
onnx_file = f"{MODEL}_{H}x{W}.onnx"
x = torch.randn(1, 3, H, W).cpu()
model.cpu()
torch.onnx.export(
    model,
    args=(x),
    f=onnx_file,
    opset_version=11,
    input_names=['input'],
    output_names=['pred','anchor_grid0','anchor_grid1','anchor_grid2','seg','ll'],
    do_constant_folding=False,
)
model_onnx1 = onnx.load(onnx_file)
model_onnx1 = onnx.shape_inference.infer_shapes(model_onnx1)
onnx.save(model_onnx1, onnx_file)


snd4onnx \
--remove_node_names SequenceConstruct_470 \
--input_onnx_file_path yolopv2_736x1280.onnx \
--output_onnx_file_path yolopv2_736x1280.onnx

onnxsim yolopv2_736x1280.onnx yolopv2_736x1280.onnx
onnxsim yolopv2_736x1280.onnx yolopv2_736x1280.onnx
onnxsim yolopv2_736x1280.onnx yolopv2_736x1280.onnx

onnx::SequenceConstruct_599
onnx::SequenceConstruct_602
onnx::SequenceConstruct_605

sor4onnx \
--input_onnx_file_path yolopv2_736x1280.onnx \
--old_new "onnx::SequenceConstruct_599" "pred0" \
--mode outputs \
--output_onnx_file_path yolopv2_736x1280.onnx

sor4onnx \
--input_onnx_file_path yolopv2_736x1280.onnx \
--old_new "onnx::SequenceConstruct_602" "pred1" \
--mode outputs \
--output_onnx_file_path yolopv2_736x1280.onnx

sor4onnx \
--input_onnx_file_path yolopv2_736x1280.onnx \
--old_new "onnx::SequenceConstruct_605" "pred2" \
--mode outputs \
--output_onnx_file_path yolopv2_736x1280.onnx



anchor_grids = np.load('model_105_anchor_grid.npy')
anchor_grids.shape
(3, 1, 3, 1, 1, 2)

anchor_grid0 = anchor_grids[0]
anchor_grid1 = anchor_grids[1]
anchor_grid2 = anchor_grids[2]

anchor_grid0.shape
(1, 3, 1, 1, 2)
anchor_grid1.shape
(1, 3, 1, 1, 2)
anchor_grid2.shape
(1, 3, 1, 1, 2)



